{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34abc91b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT\n",
    "\n",
    "file = ROOT.TFile(\"muons_v2.root\")\n",
    "file.ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21d3322a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "file = ROOT.TFile(\"muons_v2.root\")\n",
    "tree = file.Get(\"t3333\")  \n",
    "\n",
    "def transverse_momentum(px, py):\n",
    "    return np.sqrt(px**2 + py**2)\n",
    "\n",
    "def total_momentum(px, py, pz):\n",
    "    return np.sqrt(px**2 + py**2 + pz**2)\n",
    "\n",
    "def pseudorapidity(px, py, pz):\n",
    "    p = total_momentum(px, py, pz)\n",
    "    theta = np.arccos(pz / p)\n",
    "    return -np.log(np.tan(theta / 2))\n",
    "\n",
    "def azimuthal_angle(px, py):\n",
    "    return np.arctan2(py, px)\n",
    "\n",
    "def polar_angle(px, py, pz):\n",
    "    pt = transverse_momentum(px, py)\n",
    "    return np.arctan2(pt, pz)\n",
    "\n",
    "def plot_kinematic_distributions(tree, particle, px_branch, py_branch, pz_branch, e_branch, n_branch):\n",
    "    px, py, pz, e = [], [], [], []\n",
    "    for i in range(tree.GetEntries()):\n",
    "        tree.GetEntry(i)\n",
    "        num_particles = getattr(tree, n_branch)\n",
    "        \n",
    "        if num_particles == 0:\n",
    "            continue\n",
    "        for j in range(num_particles):\n",
    "            px.append(getattr(tree, px_branch)[j] / 1000)  #Convert MeV to GeV\n",
    "            py.append(getattr(tree, py_branch)[j] / 1000)\n",
    "            pz.append(getattr(tree, pz_branch)[j] / 1000)\n",
    "            e.append(getattr(tree, e_branch)[j] / 1000)\n",
    "            \n",
    "    px, py, pz, e = np.array(px), np.array(py), np.array(pz), np.array(e)\n",
    "    pt = transverse_momentum(px, py)\n",
    "    p = total_momentum(px, py, pz)\n",
    "    eta = pseudorapidity(px, py, pz)\n",
    "    phi = azimuthal_angle(px, py)\n",
    "    theta = polar_angle(px, py, pz)\n",
    "\n",
    "    fig, axs = plt.subplots(3, 2, figsize=(12, 12))\n",
    "    plot_info = [\n",
    "        (pt, f\"{particle} Transverse Momentum ($p_T$)\", \"$p_T$ (GeV)\", \"blue\", True),\n",
    "        (phi, f\"{particle} Azimuthal Angle ($\\phi$)\", \"$\\phi$ (radians)\", \"red\", False),\n",
    "        (eta, f\"{particle} Pseudorapidity ($\\eta$)\", \"$\\eta$\", \"green\", False),\n",
    "        (p, f\"{particle} Momentum ($p$)\", \"$p$ (GeV)\", \"purple\", True),\n",
    "        (e, f\"{particle} Energy ($E$)\", \"$E$ (GeV)\", \"orange\", True),\n",
    "        (theta, f\"{particle} Polar Angle ($\\\\theta$)\", \"$\\\\theta$ (radians)\", \"cyan\", False)]\n",
    "\n",
    "    for i, (data, title, xlabel, color, log_scale) in enumerate(plot_info):\n",
    "        axs[i // 2, i % 2].hist(data, bins=50, alpha=0.7, color=color)\n",
    "        axs[i // 2, i % 2].set_title(title)\n",
    "        axs[i // 2, i % 2].set_xlabel(xlabel)\n",
    "        axs[i // 2, i % 2].set_ylabel(\"Counts\")\n",
    "        if log_scale:\n",
    "            axs[i // 2, i % 2].set_yscale(\"log\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "plot_kinematic_distributions(tree, \"MUO\", \"PXMUO\", \"PYMUO\", \"PZMUO\", \"EEMUO\", \"NMUO\")  #Muons\n",
    "plot_kinematic_distributions(tree, \"ELE\", \"PXELE\", \"PYELE\", \"PZELE\", \"EEELE\", \"NELE\")  #Electrons\n",
    "plot_kinematic_distributions(tree, \"JET\", \"PXJET\", \"PYJET\", \"PZJET\", \"EEJET\", \"NJET\")  #Jets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1aaaaa32",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
